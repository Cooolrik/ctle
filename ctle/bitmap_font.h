// ctle Copyright (c) 2024 Ulrik Lindahl
// Licensed under the MIT license https://github.com/Cooolrik/ctle/blob/main/LICENSE
#pragma once
#ifndef _CTLE_BITMAP_FONT_H_
#define _CTLE_BITMAP_FONT_H_

// a ultralight-weight font render. Codepage 437 (ascii+), fixed width font only
// _Ty is the pixel type of the output image to render to

#include <cstdint>
#include <cstring>

namespace ctle
{

/**
 * @brief Get the glyph for a character in the fixed 9x16 font.
 * 
 * @param ch The character to get the glyph for.
 * @return Pointer to the glyph data.
 */
const uint16_t *get_fixed_9x16_font_glyph( uint8_t ch );

/**
 * @brief Flags for rendering the bitmap font.
 */
enum class bitmap_font_flags : int
{
    center_vertically = 0x1,    ///< Output points at the center pixel vertically.
    center_horizontally = 0x2,  ///< Output points at the center pixel horizontally.
    render_off_pixels = 0x4,    ///< Render 'off' pixels as well.
    flip_y = 0x8,               ///< Flip the letters vertically, for when y points up.
};

/**
 * @brief Render the bitmap font to the output pixel buffer.
 * 
 * @tparam _Ty The pixel type of the output image to render to.
 * @param output The output pixel buffer.
 * @param line_stride The number of pixels to the next row.
 * @param x The x position within the output pixel buffer.
 * @param y The y position within the output pixel buffer.
 * @param txt The character string to render.
 * @param pixel_on The pixel value for 'on' pixels.
 * @param pixel_off The pixel value for 'off' pixels (default is {}).
 * @param flags The rendering flags (default is {}).
 */
template<class _Ty> void render_bitmap_font( _Ty *output, uint32_t line_stride, uint32_t x, uint32_t y, const char *txt, _Ty pixel_on, _Ty pixel_off = {}, bitmap_font_flags flags = {} )
{
    output += x + ( y * line_stride ); // move output pointer to the x,y coord
    render_bitmap_font( output, line_stride, txt, strlen( txt ), pixel_on, pixel_off, flags );
}

/**
 * @brief Render the bitmap font to the output pixel buffer.
 * 
 * @tparam _Ty The pixel type of the output image to render to.
 * @param output The output pixel buffer.
 * @param line_stride The number of pixels to the next row.
 * @param txt The character string to render.
 * @param txt_length The number of characters in txt to render.
 * @param pixel_on The pixel value for 'on' pixels.
 * @param pixel_off The pixel value for 'off' pixels (default is {}).
 * @param flags The rendering flags (default is {}).
 */
template<class _Ty> void render_bitmap_font( _Ty *output, uint32_t _line_stride, const char *txt, size_t txt_length, _Ty pixel_on, _Ty pixel_off = {}, bitmap_font_flags flags = {} )
{
    const bool center_vertically = ( (int)flags & (int)bitmap_font_flags::center_vertically );
    const bool center_horizontally = ( (int)flags & (int)bitmap_font_flags::center_horizontally );
    const bool render_off_pixels = ( (int)flags & (int)bitmap_font_flags::render_off_pixels );
    const bool flip_y = ( (int)flags & (int)bitmap_font_flags::flip_y );
    int line_stride = (int)_line_stride;

    // if center vertically, move up to center of row
    if( center_vertically )
    {
        output -= ( line_stride * 8 );
    }

    // if center horizontally, move back half number of chars
    if( center_horizontally )
    {
        output -= ( txt_length * 4 );
    }

    // if flip_y, flip the order of how lines are rendered
    if( flip_y )
    {
        output += ( line_stride * 16 );
        line_stride = -line_stride;
    }

    // render each glyph
    const char *txt_end = txt + txt_length;
    while( txt < txt_end )
    {
        _Ty *line = output;

        const uint16_t *glyph = get_fixed_9x16_font_glyph( *( (uint8_t *)txt ) );

        for( size_t y = 0; y < 16; ++y )
        {
            uint16_t pix_row = glyph[y];

            for( size_t x = 0; x < 9; ++x )
            {
                if( pix_row & 0x1 )
                {
                    line[x] = pixel_on;
                }
                else if( render_off_pixels )
                {
                    line[x] = pixel_off;
                }
                pix_row >>= 1;
            }

            line += line_stride;
        }

        output += 9;
        ++txt;
    }
}

#ifdef CTLE_IMPLEMENTATION
static const uint16_t _fixed_9x16_font_bits[4096] =
{
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x7e,0x81,0xa5,0x81,0x81,0xbd,0x99,0x81,0x81,0x7e,0x0,0x0,0x0,0x0,
    0x0,0x0,0x7e,0xff,0xdb,0xff,0xff,0xc3,0xe7,0xff,0xff,0x7e,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x36,0x7f,0x7f,0x7f,0x7f,0x3e,0x1c,0x8,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x8,0x1c,0x3e,0x7f,0x3e,0x1c,0x8,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x18,0x3c,0x3c,0xe7,0xe7,0xe7,0x18,0x18,0x3c,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x18,0x3c,0x7e,0xff,0xff,0x7e,0x18,0x18,0x3c,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x3c,0x3c,0x18,0x0,0x0,0x0,0x0,0x0,0x0,
    0xff,0xff,0xff,0xff,0xff,0xff,0xe7,0xc3,0xc3,0xe7,0xff,0xff,0xff,0xff,0xff,0xff,
    0x0,0x0,0x0,0x0,0x0,0x3c,0x66,0x42,0x42,0x66,0x3c,0x0,0x0,0x0,0x0,0x0,
    0xff,0xff,0xff,0xff,0xff,0xc3,0x99,0xbd,0xbd,0x99,0xc3,0xff,0xff,0xff,0xff,0xff,
    0x0,0x0,0x78,0x70,0x58,0x4c,0x1e,0x33,0x33,0x33,0x33,0x1e,0x0,0x0,0x0,0x0,
    0x0,0x0,0x3c,0x66,0x66,0x66,0x66,0x3c,0x18,0x7e,0x18,0x18,0x0,0x0,0x0,0x0,
    0x0,0x0,0xfc,0xcc,0xfc,0xc,0xc,0xc,0xc,0xe,0xf,0x7,0x0,0x0,0x0,0x0,
    0x0,0x0,0xfe,0xc6,0xfe,0xc6,0xc6,0xc6,0xc6,0xe6,0xe7,0x67,0x3,0x0,0x0,0x0,
    0x0,0x0,0x0,0x18,0x18,0xdb,0x3c,0xe7,0x3c,0xdb,0x18,0x18,0x0,0x0,0x0,0x0,
    0x0,0x1,0x3,0x7,0xf,0x1f,0x7f,0x1f,0xf,0x7,0x3,0x1,0x0,0x0,0x0,0x0,
    0x0,0x40,0x60,0x70,0x78,0x7c,0x7f,0x7c,0x78,0x70,0x60,0x40,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x3c,0x7e,0x18,0x18,0x18,0x7e,0x3c,0x18,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x0,0x66,0x66,0x0,0x0,0x0,0x0,
    0x0,0x0,0xfe,0xdb,0xdb,0xdb,0xde,0xd8,0xd8,0xd8,0xd8,0xd8,0x0,0x0,0x0,0x0,
    0x0,0x3e,0x63,0x6,0x1c,0x36,0x63,0x63,0x36,0x1c,0x30,0x63,0x3e,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f,0x7f,0x7f,0x7f,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x3c,0x7e,0x18,0x18,0x18,0x7e,0x3c,0x18,0x7e,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x3c,0x7e,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7e,0x3c,0x18,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x18,0x30,0x7f,0x30,0x18,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0xc,0x6,0x7f,0x6,0xc,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x7f,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x24,0x66,0xff,0x66,0x24,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x8,0x1c,0x1c,0x3e,0x3e,0x7f,0x7f,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x7f,0x7f,0x3e,0x3e,0x1c,0x1c,0x8,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x3c,0x3c,0x3c,0x18,0x18,0x18,0x0,0x18,0x18,0x0,0x0,0x0,0x0,
    0x0,0x66,0x66,0x66,0x24,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x36,0x36,0x7f,0x36,0x36,0x36,0x7f,0x36,0x36,0x0,0x0,0x0,0x0,
    0x18,0x18,0x3e,0x63,0x43,0x3,0x3e,0x60,0x60,0x61,0x63,0x3e,0x18,0x18,0x0,0x0,
    0x0,0x0,0x3c,0x66,0x66,0x66,0x66,0x3c,0x18,0x7e,0x18,0x18,0x0,0x0,0x0,0x0,
    0x0,0x0,0xfc,0xcc,0xfc,0xc,0xc,0xc,0xc,0xe,0xf,0x7,0x0,0x0,0x0,0x0,
    0x0,0x0,0xfe,0xc6,0xfe,0xc6,0xc6,0xc6,0xc6,0xe6,0xe7,0x67,0x3,0x0,0x0,0x0,
    0x0,0x0,0x0,0x18,0x18,0xdb,0x3c,0xe7,0x3c,0xdb,0x18,0x18,0x0,0x0,0x0,0x0,
    0x0,0x1,0x3,0x7,0xf,0x1f,0x7f,0x1f,0xf,0x7,0x3,0x1,0x0,0x0,0x0,0x0,
    0x0,0x40,0x60,0x70,0x78,0x7c,0x7f,0x7c,0x78,0x70,0x60,0x40,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x3c,0x7e,0x18,0x18,0x18,0x7e,0x3c,0x18,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x0,0x66,0x66,0x0,0x0,0x0,0x0,
    0x0,0x0,0xfe,0xdb,0xdb,0xdb,0xde,0xd8,0xd8,0xd8,0xd8,0xd8,0x0,0x0,0x0,0x0,
    0x0,0x3e,0x63,0x6,0x1c,0x36,0x63,0x63,0x36,0x1c,0x30,0x63,0x3e,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f,0x7f,0x7f,0x7f,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x3c,0x7e,0x18,0x18,0x18,0x7e,0x3c,0x18,0x7e,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x3c,0x7e,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7e,0x3c,0x18,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x18,0x30,0x7f,0x30,0x18,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0xc,0x6,0x7f,0x6,0xc,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x7f,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x24,0x66,0xff,0x66,0x24,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x8,0x1c,0x1c,0x3e,0x3e,0x7f,0x7f,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x7f,0x7f,0x3e,0x3e,0x1c,0x1c,0x8,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x3c,0x3c,0x3c,0x18,0x18,0x18,0x0,0x18,0x18,0x0,0x0,0x0,0x0,
    0x0,0x66,0x66,0x66,0x24,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x36,0x36,0x7f,0x36,0x36,0x36,0x7f,0x36,0x36,0x0,0x0,0x0,0x0,
    0x18,0x18,0x3e,0x63,0x43,0x3,0x3e,0x60,0x60,0x61,0x63,0x3e,0x18,0x18,0x0,0x0,
    0x0,0x0,0x3c,0x66,0x66,0x66,0x66,0x3c,0x18,0x7e,0x18,0x18,0x0,0x0,0x0,0x0,
    0x0,0x0,0xfc,0xcc,0xfc,0xc,0xc,0xc,0xc,0xe,0xf,0x7,0x0,0x0,0x0,0x0,
    0x0,0x0,0xfe,0xc6,0xfe,0xc6,0xc6,0xc6,0xc6,0xe6,0xe7,0x67,0x3,0x0,0x0,0x0,
    0x0,0x0,0x0,0x18,0x18,0xdb,0x3c,0xe7,0x3c,0xdb,0x18,0x18,0x0,0x0,0x0,0x0,
    0x0,0x1,0x3,0x7,0xf,0x1f,0x7f,0x1f,0xf,0x7,0x3,0x1,0x0,0x0,0x0,0x0,
    0x0,0x40,0x60,0x70,0x78,0x7c,0x7f,0x7c,0x78,0x70,0x60,0x40,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x3c,0x7e,0x18,0x18,0x18,0x7e,0x3c,0x18,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x0,0x66,0x66,0x0,0x0,0x0,0x0,
    0x0,0x0,0xfe,0xdb,0xdb,0xdb,0xde,0xd8,0xd8,0xd8,0xd8,0xd8,0x0,0x0,0x0,0x0,
    0x0,0x3e,0x63,0x6,0x1c,0x36,0x63,0x63,0x36,0x1c,0x30,0x63,0x3e,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f,0x7f,0x7f,0x7f,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x3c,0x7e,0x18,0x18,0x18,0x7e,0x3c,0x18,0x7e,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x3c,0x7e,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x0,0x0,0x0,0x0,
    0x0,0x0,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7e,0x3c,0x18,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x18,0x30,0x7f,0x30,0x18,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0xc,0x6,0x7f,0x6,0xc,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x7f,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x24,0x66,0xff,0x66,0x24,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x8,0x1c,0x1c,0x3e,0x3e,0x7f,0x7f,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x7f,0x7f,0x3e,0x3e,0x1c,0x1c,0x8,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
};

const uint16_t *get_fixed_9x16_font_glyph( uint8_t ch )
{
    return _fixed_9x16_font_bits + ( ( (size_t)ch ) * 16 );
}

#endif//CTLE_IMPLEMENTATION

}
//namespace ctle

inline ctle::bitmap_font_flags operator| ( const ctle::bitmap_font_flags &a, const ctle::bitmap_font_flags &b )
{
    return (ctle::bitmap_font_flags)( (int)a | (int)b );
}

#endif//_CTLE_BITMAP_FONT_H_
