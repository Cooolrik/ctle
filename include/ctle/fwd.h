// ctle Copyright (c) 2022 Ulrik Lindahl
// Licensed under the MIT license https://github.com/Cooolrik/ctle/blob/main/LICENSE
//
// Warning: This file is generated by ctle. Any manual edits will be overwritten by re-generation.
#pragma once
#ifndef _CTLE_FWD_H_
#define _CTLE_FWD_H_

/// @file fwd.h
/// @brief Forward declarations of ctle classes

#include <cinttypes>
#include <cstddef>
#include <vector>

namespace ctle
{

// Standard integer and real values short-hand
typedef std::int8_t i8;
typedef std::uint8_t u8;
typedef std::int16_t i16;
typedef std::uint16_t u16;
typedef std::int32_t i32;
typedef std::uint32_t u32;
typedef std::int64_t i64;
typedef std::uint64_t u64;
typedef float f32;
typedef double f64;

// from status.h
enum class status_code : int;
class status;

// from status_return.h
template<class _StatusType, class _ValueType> class status_return;

// from data_source.h
class file_data_source;

// from data_destination.h
class file_data_destination;

// from hasher.h
class hasher_sha256;
class hasher_xxh64;
class hasher_xxh128;
template <size_t _Size> class hasher_noop;

// from read_stream.h
template<class _DataSourceTy, class _HashTy = hasher_noop<64>> class read_stream;

// from write_stream.h
template<class _DataDestTy, class _HashTy = hasher_noop<64>> class write_stream;

// from ntup.h
template<class _Ty, size_t _Size> class n_tup;
template<class _Ty, size_t _InnerSize, size_t _OuterSize> class mn_tup;

// from bimap.h
template<class _Kty, class _Vty> class bimap;

// from bitmap_font.h
enum class bitmap_font_flags : int;

// from file_funcs.h
enum class access_mode : unsigned int;
class _file_object;

// from digest.h
template<size_t _Size> struct digest;

// from uuid.h
struct uuid;

// from idx_vector.h
template <class _Ty, class _IdxTy = std::vector<i32>, class _VecTy = std::vector<_Ty>> class idx_vector;

// from optional_value.h
template<class _Ty, class _PtrTy = std::unique_ptr<_Ty>> class optional_value;

// from optional_vector.h
template <class _Ty, class _VecTy = std::vector<_Ty>> class optional_vector;

// from optional_idx_vector.h
template <class _Ty, class _IdxTy = std::vector<i32>, class _VecTy = std::vector<_Ty>> class optional_idx_vector;

// from string_funcs.h
template<class _Ty> struct string_span;
template<class _Ty> std::string to_string(const _Ty& val);
template<class _Ty> std::string to_hex_string(const _Ty& val);


}
//namespace ctle

#endif//_CTLE_FWD_H_
